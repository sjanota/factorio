{"version":3,"sources":["features/recipes/MachineType.js","features/recipes/recipes.js","features/recipes/recipesSlice.js","features/demand/recipeInputDemand.js","features/machineGrades/machineGradesSlice.js","features/demand/gatherAllRecipeDemands.js","features/science/scienceSlice.js","features/demand/demandSlice.js","features/demand/requiredMachines.js","features/demand/requiredBelt.js","components/ifSet.jsx","features/demand/components/RequiredMachines.jsx","components/PcsPerMin.jsx","features/demand/components/BeltTypeHint.jsx","features/demand/components/IngredientsList.jsx","features/demand/components/IngredientsListForItem.jsx","features/demand/components/IngredientsListForCurrentItem.jsx","features/demand/components/CurrentItemAndSupplyForm.jsx","features/demand/components/ItemAndSupplyForm.jsx","components/CollapsibleCard.jsx","features/demand/components/DemandCalculator.jsx","features/machineGrades/components/MachineGradesChoser.jsx","features/science/components/ScienceConfiguration.jsx","features/research/researchSlice.js","features/research/components/LabsCalculator.jsx","components/App.js","app/reducer.js","app/persistence.js","app/store.js","serviceWorker.js","index.js"],"names":["MachineType","Assembly","Drill","Furnace","recipes","inputs","Wall","Grenade","duration","products","machineType","Stone","Coal","Inserter","selectRecipes","selectRecipe","state","props","item","recipeInputDemand","recipe","targetSupply","demands","Object","entries","reduce","acc","key","value","fromEntries","MachineGrades","speed","name","slice","createSlice","initialState","values","map","t","reducers","setGrade","payload","type","grade","actions","selectMachineGrades","machineGrades","selectMachineGradeForRecipe","createSelector","idx","gatherAllRecipeDemands","avaialableRecipes","demand","obj1","obj2","obj2Keys","keys","commonKeys","filter","k","includes","base","merge","mining","setMiningLevel","selectScience","science","setCurrentRecipe","setTargetSupply","selectCurrentItem","selectTopTargetSupply","selectAllIngredientsDemandForItem","_","availableRecipes","selectRequiredMachinesForRecipe","machine","Math","ceil","requiredMachines","BeltTypes","ifSet","propName","Component","RequiredMachinesForItem","connect","PcsPerMin","messages","BeltTypeHint","beltType","OverlayTrigger","placement","overlay","Tooltip","id","className","toLowerCase","icon","faAngleDoubleUp","size","IngredientsRow","requiredBelt","ListGroup","Item","Row","Col","sm","IngredientsListForItem","ingredients","ingredient","IngredientsListForCurrentItem","mapDispatch","CurrentItemAndSupplyForm","targetSupplyInput","useRef","onTargetSupplyChange","event","preventDefault","n","Number","parseInt","current","Form","onSubmit","Group","as","Control","placeholder","custom","defaultValue","onChange","e","target","sort","r","InputGroup","step","ref","onBlur","Append","Text","CollapseButton","collapsed","onClick","faChevronDown","faChevronUp","CollapsibleCard","header","children","initallyCollapsed","useState","setCollapsed","Card","Header","s","DemandCalculator","bg","Body","CurrentMachineGradesChoser","currentMachineGrades","Label","column","CurrentScienceConfiguration","miningLevel","min","labsCount","speedBonus","setLabsCount","setSpeedBonus","selectLabsCount","research","selectSpeedBonus","selectProbesDemand","lc","sb","cycleTime","it","LabsCalculator","WiredLabsConfiguration","ProbesDemand","round","labsCountRef","speedBonusRef","newLabsCount","newSpeedBonus","Button","style","display","App","reducer","combineReducers","stateKey","preloadedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","configureStore","subscribe","stringify","setItem","saveState","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41a25b60.chunk.js","sourcesContent":["export const MachineType = {\n  Assembly: \"Assembly\",\n  Drill: \"Drill\",\n  Furnace: \"Furnace\",\n};\n","import { MachineType } from \"./MachineType\";\n\nexport const recipes = {\n  \"Military science pack\": {\n    inputs: { Wall: 2, Grenade: 1, \"Piercing rounds magazine\": 1 },\n    duration: 10,\n    products: 2,\n    machineType: MachineType.Assembly,\n  },\n  Stone: {\n    duration: 1,\n    products: 1,\n    machineType: MachineType.Furnace,\n  },\n  Coal: {\n    duration: 1,\n    products: 1,\n    machineType: MachineType.Drill,\n  },\n  \"Stone brick\": {\n    inputs: { Stone: 2 },\n    duration: 3.2,\n    products: 1,\n    machineType: MachineType.Furnace,\n  },\n  Wall: {\n    inputs: { \"Stone brick\": 5 },\n    duration: 0.5,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  Grenade: {\n    inputs: { Coal: 10, \"Iron plate\": 5 },\n    duration: 8,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  \"Piercing rounds magazine\": {\n    inputs: { \"Copper plate\": 5, \"Firearm magazine\": 1, \"Steel plate\": 1 },\n    duration: 3,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  \"Steel plate\": {\n    inputs: { \"Iron plate\": 5 },\n    duration: 16,\n    products: 1,\n    machineType: MachineType.Furnace,\n  },\n  \"Firearm magazine\": {\n    inputs: { \"Iron plate\": 4 },\n    duration: 1,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  \"Logistic science pack\": {\n    inputs: { Inserter: 1, \"Transport belt\": 1 },\n    duration: 6,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  Inserter: {\n    inputs: { \"Electronic circuit\": 1, \"Iron plate\": 1, \"Iron gear wheel\": 1 },\n    duration: 0.5,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  \"Iron ore\": {\n    duration: 1,\n    products: 1,\n    machineType: MachineType.Drill,\n  },\n  \"Copper ore\": {\n    duration: 1,\n    products: 1,\n    machineType: MachineType.Drill,\n  },\n  \"Iron plate\": {\n    inputs: { \"Iron ore\": 1 },\n    duration: 3.2,\n    products: 1,\n    machineType: MachineType.Furnace,\n  },\n  \"Iron gear wheel\": {\n    inputs: { \"Iron plate\": 2 },\n    duration: 0.5,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  \"Copper plate\": {\n    inputs: { \"Copper ore\": 1 },\n    duration: 3.2,\n    products: 1,\n    machineType: MachineType.Furnace,\n  },\n  \"Copper wire\": {\n    inputs: { \"Copper plate\": 1 },\n    duration: 0.5,\n    products: 2,\n    machineType: MachineType.Assembly,\n  },\n  \"Electronic circuit\": {\n    inputs: { \"Iron plate\": 1, \"Copper wire\": 3 },\n    duration: 0.5,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  \"Automation science pack\": {\n    inputs: { \"Copper plate\": 1, \"Iron gear wheel\": 1 },\n    duration: 5,\n    products: 1,\n    machineType: MachineType.Assembly,\n  },\n  \"Transport belt\": {\n    inputs: { \"Iron plate\": 1, \"Iron gear wheel\": 1 },\n    duration: 0.5,\n    products: 2,\n    machineType: MachineType.Assembly,\n  },\n};\n","import { recipes } from \"./recipes\";\n\nexport const selectRecipes = () => recipes;\n\nexport const selectRecipe = (state, props) => selectRecipes(state)[props.item];\n","// targetSupply in pcs/min = pcs/60s\n// recipeInputDemand in s/pcs\nexport function recipeInputDemand(recipe, targetSupply) {\n  const inputs = Object.entries(recipe.inputs);\n  const demands = inputs.reduce(\n    (acc, [key, value]) => [\n      ...acc,\n      [key, (value * targetSupply) / recipe.products],\n    ],\n    []\n  );\n  return Object.fromEntries(demands);\n}\n","import { createSlice, createSelector } from \"@reduxjs/toolkit\";\nimport { selectRecipe } from \"../recipes/recipesSlice\";\nimport { MachineType } from \"../recipes/MachineType\";\n\nexport const MachineGrades = {\n  [MachineType.Assembly]: [\n    { speed: 0.5, name: \"Mk1\" },\n    { speed: 0.75, name: \"Mk2\" },\n    { speed: 1.25, name: \"Mk3\" },\n  ],\n  [MachineType.Drill]: [\n    { speed: 0.25, name: \"Burning\" },\n    { speed: 0.5, name: \"Electric\" },\n  ],\n  [MachineType.Furnace]: [\n    { speed: 1, name: \"Stone\" },\n    { speed: 2, name: \"Steel\" },\n    { speed: 2, name: \"Electric\" },\n  ],\n};\n\nconst slice = createSlice({\n  name: \"machineGrades\",\n  initialState: Object.fromEntries(\n    Object.values(MachineType).map((t) => [t, 0])\n  ),\n  reducers: {\n    setGrade(state, { payload }) {\n      const { type, grade } = payload;\n      state[type] = grade;\n    },\n  },\n});\n\nexport const { setGrade } = slice.actions;\nexport default slice.reducer;\n\nexport const selectMachineGrades = (state) => state.machineGrades;\n\nexport const selectMachineGradeForRecipe = createSelector(\n  [selectMachineGrades, selectRecipe],\n  (state, recipe) => {\n    if (!recipe) return;\n    const idx = state[recipe.machineType];\n    return MachineGrades[recipe.machineType][idx];\n  }\n);\n","import { recipeInputDemand } from \"./recipeInputDemand\";\n\nexport function gatherAllRecipeDemands(\n  recipe,\n  avaialableRecipes,\n  targetSupply\n) {\n  if (!recipe.inputs) return {};\n  const demands = recipeInputDemand(recipe, targetSupply);\n  return Object.entries(demands).reduce((acc, [item, demand]) => {\n    return merge(\n      acc,\n      gatherAllRecipeDemands(avaialableRecipes[item], avaialableRecipes, demand)\n    );\n  }, demands);\n}\n\nfunction merge(obj1, obj2) {\n  const obj2Keys = Object.keys(obj2);\n  const commonKeys = Object.keys(obj1).filter((k) => obj2Keys.includes(k));\n  const base = { ...obj1, ...obj2 };\n  return commonKeys.reduce(\n    (acc, k) => ({ ...acc, [k]: obj1[k] + obj2[k] }),\n    base\n  );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"science\",\n  initialState: {\n    mining: 0,\n  },\n  reducers: {\n    setMiningLevel(state, { payload }) {\n      state.mining = payload;\n    },\n  },\n});\n\nexport const { setMiningLevel } = slice.actions;\nexport default slice.reducer;\n\nexport const selectScience = (state) => state.science;\n","import { createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport { selectRecipe, selectRecipes } from \"../recipes/recipesSlice\";\nimport { recipeInputDemand } from \"./recipeInputDemand\";\nimport { requiredMachines } from \"./requiredMachines\";\nimport { selectMachineGradeForRecipe } from \"../machineGrades/machineGradesSlice\";\nimport { gatherAllRecipeDemands } from \"./gatherAllRecipeDemands\";\nimport { selectScience } from \"../science/scienceSlice\";\nimport { MachineType } from \"../recipes/MachineType\";\n\nconst slice = createSlice({\n  name: \"demand\",\n  initialState: { item: null, targetSupply: 1 },\n  reducers: {\n    setCurrentRecipe(state, { payload }) {\n      state.item = payload;\n    },\n    setTargetSupply(state, { payload }) {\n      state.targetSupply = payload;\n    },\n  },\n});\n\nexport const { setCurrentRecipe, setTargetSupply } = slice.actions;\nexport default slice.reducer;\n\nexport const selectCurrentItem = (state) => state.demand.item;\nexport const selectTopTargetSupply = (state) => state.demand.targetSupply;\n\nexport const selectInputsForRecipe = createSelector(\n  [selectRecipe, (_, props) => props.targetSupply],\n  (recipe, targetSupply) => {\n    if (!recipe || !recipe.inputs) return;\n    return recipeInputDemand(recipe, targetSupply);\n  }\n);\n\nexport const selectAllIngredientsDemandForItem = createSelector(\n  [selectRecipe, selectRecipes, (_, props) => props.targetSupply],\n  (recipe, availableRecipes, targetSupply) => {\n    if (!recipe) return;\n    if (!recipe.inputs) return {};\n    return gatherAllRecipeDemands(recipe, availableRecipes, targetSupply);\n  }\n);\n\nexport const selectRequiredMachinesForRecipe = createSelector(\n  [\n    selectRecipe,\n    selectMachineGradeForRecipe,\n    selectScience,\n    (_, props) => props.targetSupply,\n  ],\n  (recipe, machine, science, targetSupply) => {\n    if (!recipe) return;\n    let speed = machine.speed;\n    if (recipe.machineType === MachineType.Drill) {\n      speed *= 1 + science.mining * 0.1;\n    }\n    return requiredMachines(recipe, targetSupply, speed);\n  }\n);\n","export function requiredMachines(recipe, targetSupply, speed) {\n  return Math.ceil(\n    ((recipe.duration / speed) * targetSupply) / 60 / recipe.products\n  );\n}\n","export const BeltTypes = {\n  Normal: \"Normal\",\n  Fast: \"Fast\",\n  Express: \"Express\",\n  Overloaded: \"Overloaded\",\n};\n\nexport function requiredBelt(targetSupply) {\n  if (targetSupply <= 15 * 60) return BeltTypes.Normal;\n  else if (targetSupply <= 30 * 60) return BeltTypes.Fast;\n  else if (targetSupply <= 45 * 60) return BeltTypes.Express;\n  else return BeltTypes.Overloaded;\n}\n","import React from \"react\";\n\nexport const ifSet = (propName) => (Component) => (props) =>\n  !!props[propName] && <Component {...props} />;\n","import React from \"react\";\nimport { selectRequiredMachinesForRecipe } from \"../demandSlice\";\nimport { connect } from \"react-redux\";\nimport { selectRecipe } from \"../../recipes/recipesSlice\";\nimport { ifSet } from \"../../../components/ifSet\";\n\nconst RequiredMachines = ({ requiredMachines, recipe }) => {\n  return (\n    <span>\n      {requiredMachines} {recipe.machineType}\n    </span>\n  );\n};\n\nconst mapState = (state, props) => ({\n  requiredMachines: selectRequiredMachinesForRecipe(state, props),\n  recipe: selectRecipe(state, props),\n});\n\nexport const RequiredMachinesForItem = connect(mapState)(\n  ifSet(\"item\")(RequiredMachines)\n);\n","import React from \"react\";\n\nexport const PcsPerMin = () => {\n  return (\n    <small>\n      <sup>pcs</sup>/<sub>min</sub>\n    </small>\n  );\n};\n","import { BeltTypes } from \"../requiredBelt\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleDoubleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { Tooltip, OverlayTrigger } from \"react-bootstrap\";\n\nconst messages = {\n  [BeltTypes.Normal]: \"Regular transport belts\",\n  [BeltTypes.Fast]: \"Fast transport belts\",\n  [BeltTypes.Express]: \"Express transport belts\",\n  [BeltTypes.Overloaded]:\n    \"The belt is overloaded, you need to use more then one parallel belt or split the process\",\n};\n\nexport const BeltTypeHint = ({ beltType }) => {\n  return (\n    <OverlayTrigger\n      placement=\"left\"\n      overlay={(props) => (\n        <Tooltip id=\"button-tooltip\" {...props}>\n          {messages[beltType]}\n        </Tooltip>\n      )}\n    >\n      <span className={`belt-type-${beltType.toLowerCase()}`}>\n        <FontAwesomeIcon icon={faAngleDoubleUp} size=\"lg\" />\n      </span>\n    </OverlayTrigger>\n  );\n};\n","import React from \"react\";\nimport { ListGroup, Row, Col } from \"react-bootstrap\";\nimport { requiredBelt } from \"../requiredBelt\";\nimport { RequiredMachinesForItem } from \"./RequiredMachines\";\nimport \"./IngredientsList.css\";\nimport { PcsPerMin } from \"../../../components/PcsPerMin\";\nimport { BeltTypeHint } from \"./BeltTypeHint\";\n\nexport const IngredientsList = ({ ingredients }) => {\n  return (\n    <ListGroup className=\"list-group-flush\">\n      {Object.entries(ingredients).map(([ingredient, targetSupply]) => (\n        <IngredientsRow\n          key={ingredient}\n          item={ingredient}\n          targetSupply={targetSupply}\n        />\n      ))}\n    </ListGroup>\n  );\n};\n\nconst IngredientsRow = ({ item, targetSupply }) => {\n  const beltType = requiredBelt(targetSupply);\n  return (\n    <ListGroup.Item\n      className={`ingredients-row belt-${beltType.toLowerCase()}`}\n    >\n      <Row>\n        <Col sm={5}>{item}</Col>\n        <Col sm={3}>\n          {targetSupply} <PcsPerMin />\n        </Col>\n        <Col sm={3}>\n          <RequiredMachinesForItem item={item} targetSupply={targetSupply} />\n        </Col>\n        <Col>\n          <BeltTypeHint beltType={beltType} />\n        </Col>\n      </Row>\n    </ListGroup.Item>\n  );\n};\n","import { selectAllIngredientsDemandForItem } from \"../demandSlice\";\nimport { connect } from \"react-redux\";\nimport { IngredientsList } from \"./IngredientsList\";\n\nconst mapState = (state, props) => ({\n  ingredients: selectAllIngredientsDemandForItem(state, props),\n});\n\nexport const IngredientsListForItem = connect(mapState)(IngredientsList);\n","import { connect } from \"react-redux\";\nimport { selectCurrentItem, selectTopTargetSupply } from \"../demandSlice\";\nimport { IngredientsListForItem } from \"./IngredientsListForItem\";\nimport { ifSet } from \"../../../components/ifSet\";\n\nexport const IngredientsListForCurrentItem = connect((state) => ({\n  item: selectCurrentItem(state),\n  targetSupply: selectTopTargetSupply(state),\n}))(ifSet(\"item\")(IngredientsListForItem));\n","import {\n  selectCurrentItem,\n  selectTopTargetSupply,\n  selectRequiredMachinesForRecipe,\n  setTargetSupply,\n  setCurrentRecipe,\n} from \"../demandSlice\";\nimport { connect } from \"react-redux\";\nimport { selectRecipes, selectRecipe } from \"../../recipes/recipesSlice\";\nimport { ItemAndSupplyForm } from \"./ItemAndSupplyForm\";\n\nconst mapState = (state, props) => ({\n  item: selectCurrentItem(state),\n  targetSupply: selectTopTargetSupply(state),\n  availableRecipes: Object.keys(selectRecipes(state)),\n  requiredMachines: selectRequiredMachinesForRecipe(state, props),\n  recipe: selectRecipe(state, props),\n});\n\nconst mapDispatch = {\n  setTargetSupply,\n  setCurrentRecipe,\n};\n\nexport const CurrentItemAndSupplyForm = connect(\n  mapState,\n  mapDispatch\n)(ItemAndSupplyForm);\n","import React, { useRef } from \"react\";\nimport { Form, Col, InputGroup } from \"react-bootstrap\";\nimport { RequiredMachinesForItem } from \"./RequiredMachines\";\nimport { PcsPerMin } from \"../../../components/PcsPerMin\";\n\nexport const ItemAndSupplyForm = ({\n  setTargetSupply,\n  setCurrentRecipe,\n  item,\n  availableRecipes,\n  targetSupply,\n}) => {\n  const targetSupplyInput = useRef();\n\n  function onTargetSupplyChange(event) {\n    event.preventDefault();\n    const n = Number.parseInt(targetSupplyInput.current.value);\n    setTargetSupply(n);\n  }\n\n  return (\n    <Form onSubmit={onTargetSupplyChange}>\n      <Form.Row>\n        <Form.Group as={Col} sm={5} className=\"mb-0\">\n          <Form.Control\n            as=\"select\"\n            placeholder=\"Item\"\n            custom\n            defaultValue={item}\n            onChange={(e) => setCurrentRecipe(e.target.value)}\n          >\n            <option value={item}>{item}</option>\n            {availableRecipes.sort().map(\n              (r) =>\n                r !== item && (\n                  <option key={r} value={r}>\n                    {r}\n                  </option>\n                )\n            )}\n          </Form.Control>\n        </Form.Group>\n        <Form.Group as={Col} sm={3} className=\"mb-0\">\n          <InputGroup>\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Target Supply\"\n              step=\"1\"\n              defaultValue={targetSupply}\n              ref={targetSupplyInput}\n              onBlur={onTargetSupplyChange}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>\n                <PcsPerMin />\n              </InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Col className=\"d-flex align-items-center pl-3\">\n          <RequiredMachinesForItem item={item} targetSupply={targetSupply} />\n        </Col>\n      </Form.Row>\n    </Form>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronUp, faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\n\nconst CollapseButton = ({ collapsed, onClick }) => {\n  return (\n    <FontAwesomeIcon\n      icon={collapsed ? faChevronDown : faChevronUp}\n      onClick={onClick}\n    />\n  );\n};\n\nconst CollapsibleCard = ({\n  header,\n  children,\n  initallyCollapsed = false,\n  ...props\n}) => {\n  const [collapsed, setCollapsed] = useState(initallyCollapsed);\n  return (\n    <Card {...props}>\n      <Card.Header\n        className=\"d-flex justify-content-between\"\n        onClick={() => setCollapsed((s) => !s)}\n      >\n        <div>{header}</div>\n        <div>\n          <CollapseButton collapsed={collapsed} />\n        </div>\n      </Card.Header>\n      {!!collapsed || children}\n    </Card>\n  );\n};\n\nexport default CollapsibleCard;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nimport { IngredientsListForCurrentItem } from \"./IngredientsListForCurrentItem\";\nimport { CurrentItemAndSupplyForm } from \"./CurrentItemAndSupplyForm\";\nimport CollapsibleCard from \"../../../components/CollapsibleCard\";\n\nexport const DemandCalculator = () => {\n  return (\n    <CollapsibleCard\n      header=\"Demand calculator\"\n      className=\"m-1 demand-calculator\"\n      bg=\"light\"\n    >\n      <Card.Body>\n        <CurrentItemAndSupplyForm />\n      </Card.Body>\n      <IngredientsListForCurrentItem />\n    </CollapsibleCard>\n  );\n};\n","import React from \"react\";\nimport {\n  MachineGrades,\n  selectMachineGrades,\n  setGrade,\n} from \"../machineGradesSlice\";\nimport { MachineType } from \"../../recipes/MachineType\";\nimport { connect } from \"react-redux\";\nimport { Form, Row, Col, Card } from \"react-bootstrap\";\nimport CollapsibleCard from \"../../../components/CollapsibleCard\";\n\nconst MachineGradesChoser = ({ currentMachineGrades, setGrade }) => {\n  return (\n    <CollapsibleCard\n      header=\"Machine grades\"\n      className=\"m-1\"\n      bg=\"light\"\n      initallyCollapsed={true}\n    >\n      <Card.Body>\n        <Form>\n          {Object.keys(MachineType).map((type) => (\n            <Form.Group key={type} as={Row}>\n              <Form.Label column sm={2}>\n                {type}\n              </Form.Label>\n              <Col className=\"d-flex align-items-center\">\n                <Form.Control\n                  as=\"select\"\n                  custom\n                  value={currentMachineGrades[type]}\n                  onChange={(e) => setGrade({ type, grade: e.target.value })}\n                >\n                  {MachineGrades[type].map((grade, idx) => (\n                    <option key={grade.name} value={idx}>\n                      {grade.name}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Col>\n            </Form.Group>\n          ))}\n        </Form>\n      </Card.Body>\n    </CollapsibleCard>\n  );\n};\n\nconst mapState = (state) => ({\n  currentMachineGrades: selectMachineGrades(state),\n});\n\nconst mapDispatch = {\n  setGrade,\n};\n\nexport const CurrentMachineGradesChoser = connect(\n  mapState,\n  mapDispatch\n)(MachineGradesChoser);\n","import React, { useRef } from \"react\";\nimport { setMiningLevel, selectScience } from \"../scienceSlice\";\nimport { connect } from \"react-redux\";\nimport { Form, Row, Col, Card } from \"react-bootstrap\";\nimport CollapsibleCard from \"../../../components/CollapsibleCard\";\n\nconst ScienceConfiguration = ({ science, setMiningLevel }) => {\n  const miningLevel = useRef();\n\n  function onSubmit(e) {\n    e.preventDefault();\n    setMiningLevel(parseInt(miningLevel.current.value));\n  }\n\n  return (\n    <CollapsibleCard\n      header=\"Science\"\n      className=\"m-1\"\n      bg=\"light\"\n      initallyCollapsed={true}\n    >\n      <Card.Body>\n        <Form onSubmit={onSubmit}>\n          <Form.Group as={Row}>\n            <Form.Label column sm={2}>\n              Mining\n            </Form.Label>\n            <Col className=\"d-flex align-items-center\">\n              <Form.Control\n                type=\"number\"\n                step=\"1\"\n                min=\"0\"\n                defaultValue={science.mining}\n                ref={miningLevel}\n              />\n            </Col>\n          </Form.Group>\n        </Form>\n      </Card.Body>\n    </CollapsibleCard>\n  );\n};\n\nconst mapState = (state) => ({\n  science: selectScience(state),\n});\n\nconst mapDispatch = {\n  setMiningLevel,\n};\n\nexport const CurrentScienceConfiguration = connect(\n  mapState,\n  mapDispatch\n)(ScienceConfiguration);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"research\",\n  initialState: {\n    labsCount: 0,\n    speedBonus: 0,\n  },\n  reducers: {\n    setLabsCount(state, { payload }) {\n      state.labsCount = payload;\n    },\n    setSpeedBonus(state, { payload }) {\n      state.speedBonus = payload;\n    },\n  },\n});\n\nexport const { setLabsCount, setSpeedBonus } = slice.actions;\nexport default slice.reducer;\n\nexport const selectLabsCount = (state) => state.research.labsCount;\nexport const selectSpeedBonus = (state) => state.research.speedBonus;\n\nexport const selectProbesDemand = (state) => {\n  const lc = selectLabsCount(state);\n  const sb = selectSpeedBonus(state);\n\n  function calcDemand(cycleTime) {\n    const ERS = 1 + sb / 100;\n    const ACT = cycleTime / 60 / ERS;\n\n    return lc / ACT;\n  }\n\n  return [\n    { cycleTime: 15 },\n    { cycleTime: 30 },\n    { cycleTime: 60 },\n  ].map((it) => ({ ...it, demand: calcDemand(it.cycleTime) }));\n};\n","import React from \"react\";\nimport CollapsibleCard from \"../../../components/CollapsibleCard\";\nimport { Form, Card, Col, InputGroup, Button } from \"react-bootstrap\";\nimport { useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  selectLabsCount,\n  selectSpeedBonus,\n  setSpeedBonus,\n  setLabsCount,\n  selectProbesDemand,\n} from \"../researchSlice\";\n\nexport const LabsCalculator = () => {\n  return (\n    <CollapsibleCard\n      header=\"Labs calculator\"\n      className=\"m-1\"\n      bg=\"light\"\n      initallyCollapsed={false}\n    >\n      <Card.Body>\n        <WiredLabsConfiguration />\n        <ProbesDemand />\n      </Card.Body>\n    </CollapsibleCard>\n  );\n};\n\nconst ProbesDemand = connect((state) => ({\n  demands: selectProbesDemand(state),\n}))(({ demands }) => (\n  <div>\n    {demands.map((it) => (\n      <p key={it.cycleTime}>\n        Cycle time <b>{it.cycleTime}s</b>:{\" \"}\n        <b>{Math.round(it.demand * 100) / 100}</b> <sup>probes</sup>/\n        <sub>min</sub>\n      </p>\n    ))}\n  </div>\n));\n\nconst LabsConfiguration = ({\n  labsCount,\n  setLabsCount,\n  speedBonus,\n  setSpeedBonus,\n}) => {\n  const labsCountRef = useRef();\n  const speedBonusRef = useRef();\n\n  function onSubmit(event) {\n    event.preventDefault();\n\n    const newLabsCount = parseInt(labsCountRef.current.value);\n    if (newLabsCount !== labsCount) {\n      setLabsCount(newLabsCount);\n    }\n\n    const newSpeedBonus = parseInt(speedBonusRef.current.value);\n    if (newSpeedBonus !== speedBonus) {\n      setSpeedBonus(newSpeedBonus);\n    }\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Form.Row>\n        <Form.Group as={Col}>\n          <Form.Label># of labs</Form.Label>\n          <Form.Control\n            ref={labsCountRef}\n            type=\"number\"\n            defaultValue={labsCount}\n            min=\"0\"\n            step=\"1\"\n          />\n        </Form.Group>\n        <Form.Group as={Col}>\n          <Form.Label>Speed bonus</Form.Label>\n          <InputGroup>\n            <Form.Control\n              ref={speedBonusRef}\n              type=\"number\"\n              defaultValue={speedBonus}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>%</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n      </Form.Row>\n      <Button type=\"submit\" style={{ display: \"none\" }} />\n    </Form>\n  );\n};\n\nconst mapState = (state) => ({\n  labsCount: selectLabsCount(state),\n  speedBonus: selectSpeedBonus(state),\n});\n\nconst mapDispatch = {\n  setLabsCount,\n  setSpeedBonus,\n};\n\nconst WiredLabsConfiguration = connect(\n  mapState,\n  mapDispatch\n)(LabsConfiguration);\n","import React from \"react\";\r\nimport { DemandCalculator } from \"../features/demand/components/DemandCalculator\";\r\nimport { CurrentMachineGradesChoser } from \"../features/machineGrades/components/MachineGradesChoser\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { CurrentScienceConfiguration } from \"../features/science/components/ScienceConfiguration\";\r\nimport { LabsCalculator } from \"../features/research/components/LabsCalculator\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CurrentScienceConfiguration />\r\n      <CurrentMachineGradesChoser />\r\n      <LabsCalculator />\r\n      <DemandCalculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport demand from \"../features/demand/demandSlice\";\nimport machineGrades from \"../features/machineGrades/machineGradesSlice\";\nimport science from \"../features/science/scienceSlice\";\nimport research from \"../features/research/researchSlice\";\n\nconst reducer = combineReducers({\n  demand,\n  machineGrades,\n  science,\n  research,\n});\n\nexport default reducer;\n","const stateKey = \"factorio-calculator.state\";\n\nexport function loadState() {\n  try {\n    const serializedState = localStorage.getItem(stateKey);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n}\n\nexport function saveState(state) {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(stateKey, serializedState);\n  } catch {\n    // ignore write errors\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport reducer from \"./reducer\";\r\nimport { loadState, saveState } from \"./persistence\";\r\n\r\nconst preloadedState = loadState();\r\n\r\nconst store = configureStore({\r\n  reducer,\r\n  preloadedState,\r\n});\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}